package br.unisc.model;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

import br.unisc.model.rss.Feed;
import br.unisc.model.rss.FeedMessage;
import br.unisc.model.rss.RSSFeedParser;
import br.unisc.model.xmlcotacao.Cotacao;
import br.unisc.model.xmlcotacao.Moeda;
import br.unisc.model.xmlcotacao.XMLCotacaoParser;
import br.unisc.rules.ChatBot;
import br.unisc.rules.ChatBot.Acao;
import br.unisc.rules.Comando;
import br.unisc.rules.Emoji;

/**
 *
 * @author Pazinato
 */
public class Servidor {

	private ServerSocket servidor;
	private Socket cliente;
	private int cont;

	public Servidor() {
		this.cont = 1;
		try {
			servidor = new ServerSocket(1234);

			System.out.println("SERVIDOR INICIADO!\n\t AGUARDANDO CONEXOES...");

			while (true) {
				cliente = servidor.accept();

				new Thread(new ThreadServer(cliente)).start();

			}

		} catch (IOException ex) {
			Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public class ThreadServer implements Runnable {

		private ObjectOutputStream output;
		private ObjectInputStream input;

		public ThreadServer(Socket cliente) {
			try {
				this.output = new ObjectOutputStream(cliente.getOutputStream());
				this.input = new ObjectInputStream(cliente.getInputStream());
			} catch (IOException ex) {
				Logger.getLogger(ThreadServer.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

		@Override
		public void run() {
			ChatBot comando = null;
			try {
				while ((comando = (ChatBot) input.readObject()) != null) {
					Acao acao = comando.getAcao();
					switch (acao) {
					case CONECTAR:
						System.out.println(comando.getTexto() + cliente.getLocalAddress().getHostAddress());
						comando.setNome("Cliente " + cont);
						comando.setTexto("Conectado como '" + comando.getNome() + "' ");
						cont++;
						enviar(comando, output);
						break;
					case DESCONECTAR:
						System.out.println(comando.getTexto());
						comando.setTexto("Adeus " + comando.getNome() + " !");
						enviar(comando, output);
						return;
					case ENVIAR:
						System.out.println("Nova solicitacao do (" + comando.getNome() + "):" + comando.getTexto());
						String temp = "Servidor retornando "+ comando.getTexto() + " ao "+comando.getNome();
                                                analisarRequisicaoCliente(comando);
						enviar(comando, output);
						System.out.println(temp);
                                                break;
					default:
						break;
					}
				}
			} catch (IOException | ClassNotFoundException ex) {
				Logger.getLogger(ThreadServer.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

		private void analisarRequisicaoCliente(ChatBot comando) {
			comando.setNome("Servidor: ");
			comando.setAcao(Acao.ENVIAR);
			String texto = comando.getTexto().trim();
			if (texto != null && texto.length() > 0) {
				String[] textoRepartido = texto.split(" ");
				if (textoRepartido.length > 0) {
					String comandoSolicitado = textoRepartido[0];
					if (comandoSolicitado.startsWith("/")) {
						comandoSolicitado = comandoSolicitado.substring(1);
					}
					try {
						Comando comandoReconhecido = Comando.valueOf(comandoSolicitado);
						StringBuffer sb = new StringBuffer();
						GregorianCalendar now = new GregorianCalendar();
						SimpleDateFormat sdf = null;
						// comando reconhecido
						switch (comandoReconhecido) {
						case HELP:
							sb.append("Ola, estes sao os comandos que eu estou programado para aceitar:\n");
							Comando[] values = Comando.values();
							for (Comando acao2 : values) {
								String[] definition = acao2.getDefinition();
								String[] explanation = acao2.getExplanation();
								for (int i = 0; i< definition.length; i++) {
									sb.append(definition[i] + "\t\t" + explanation[i] + "\n");									
								}
							}
							comando.setTexto(sb.toString());
							break;
						case AUTORES:
							sb.append("Fabricio Pazinato e Jonatas Schuler");
							comando.setTexto(sb.toString());
							break;
						case DATA:
							sdf = new SimpleDateFormat("dd-MM-yyyy");
							sb.append(sdf.format(now.getTime()));
							comando.setTexto(sb.toString());
							break;
						case HORA:
							sdf = new SimpleDateFormat("HH:mm");
							sb.append(sdf.format(now.getTime()));
							comando.setTexto(sb.toString());
							break;
						case DATAHORA:
							sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm");
							sb.append(sdf.format(now.getTime()));
							comando.setTexto(sb.toString());
							break;
						case EMOJI:
							Emoji[] emojis = Emoji.values();
							int length = emojis.length;
							int nextInt = new Random().nextInt(length);
							Emoji emoji = emojis[nextInt];
							comando.setTexto(emoji.getDefinition());
							break;
						case NEWS:
							FeedMessage randomNews = getRandomNews();
							comando.setTexto(randomNews.getTitle());
                                                        break;
						case COTACAO:
							Cotacao cotacao = getCotacao();
							Moeda moeda = null;
							if (textoRepartido.length > 1) {
								// commando possui moeda
								String moedaSelecionada = textoRepartido[1].toUpperCase().trim();
								moeda = cotacao.getMoeda(moedaSelecionada);
								if (moeda == null) {
									StringBuffer sb2 = new StringBuffer();
									sb2.append(XMLCotacaoParser.ARS);
									sb2.append(",");
									sb2.append(XMLCotacaoParser.BTC);
									sb2.append(",");
									sb2.append(XMLCotacaoParser.EUR);
									sb2.append(",");
									sb2.append(XMLCotacaoParser.GBP);
									sb2.append(",");
									sb2.append(XMLCotacaoParser.USD);
									comando.setTexto(
											"Moeda selecionada nao identificada. Tente novamente com as seguintes opcoes: "
													+ sb2.toString());
								} else {
									// identificou a moeda selecionada
									if (textoRepartido.length > 2) {
										// commando possui valor a ser
										// convertido
										String valorInformado = textoRepartido[2].trim();
										try {
											double valor = Double.parseDouble(valorInformado);
											double cotacaoMoeda = Double
													.parseDouble(moeda.getValor().trim().replaceAll(",", "."));
											double valorConvertido = valor / cotacaoMoeda;
											String valorConvertidoFormatado = String.format("%.2f", valorConvertido);
											comando.setTexto("R$ " + valorInformado + " correspondem a "
													+ valorConvertidoFormatado + " " + moeda.getNome());
										} catch (NumberFormatException nfe) {
											comando.setTexto(
													"Identificamos a moeda a ser usada na conversao, mas o valor informado e invalido.\nUtilize apenas numeros e ponto como separador decimal.\nEx: /COTACAO USD 500.00");
										}
									} else {
										comando.setTexto(moeda.toString());
									}
								}
							} else {
								moeda = cotacao.getRandomMoeda();
								comando.setTexto(moeda.toString());
							}
                                                        break;
						default:
							break;
						}
					} catch (IllegalArgumentException e) {
                                            
					}
				}
			}
		}

	}

	private Cotacao getCotacao() {
		XMLCotacaoParser parser = new XMLCotacaoParser("http://api.promasters.net.br/cotacao/v1/valores?alt=xml");
		Cotacao cotacao = parser.readCotacao();
		return cotacao;
	}

	private FeedMessage getRandomNews() {
		RSSFeedParser parser = new RSSFeedParser("http://feeds.bbci.co.uk/news/rss.xml");
		Feed feed = parser.readFeed();
		List<FeedMessage> messages = feed.getMessages();
		int size = messages.size();
		int nextInt = new Random().nextInt(size);
		FeedMessage feedMessage = messages.get(nextInt);
		return feedMessage;
	}

	private void enviar(ChatBot comando, ObjectOutputStream output) throws IOException {
		output.writeObject(comando);
		comando = null;
	}

}
