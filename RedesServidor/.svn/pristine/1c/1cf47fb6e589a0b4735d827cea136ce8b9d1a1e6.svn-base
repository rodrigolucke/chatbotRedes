/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.unisc.model;

import br.unisc.rules.ChatBot;
import br.unisc.rules.ChatBot.Acao;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Pazinato
 */
public class Servidor {

	private ServerSocket servidor;
	private Socket cliente;
	private int cont;

	public Servidor() {
		this.cont = 1;
		try {
			servidor = new ServerSocket(1234);

			System.out.println("SERVIDOR INICIADO!");

			while (true) {
				cliente = servidor.accept();

				new Thread(new ThreadServer(cliente)).start();

			}

		} catch (IOException ex) {
			Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public class ThreadServer implements Runnable {

		private ObjectOutputStream output;
		private ObjectInputStream input;

		public ThreadServer(Socket cliente) {
			try {
				this.output = new ObjectOutputStream(cliente.getOutputStream());
				this.input = new ObjectInputStream(cliente.getInputStream());
			} catch (IOException ex) {
				Logger.getLogger(ThreadServer.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

		@Override
		public void run() {
			ChatBot comando = null;

			try {
				while ((comando = (ChatBot) input.readObject()) != null) {
					ChatBot.Acao acao = comando.getAcao();

					switch (acao) {
					case CONECTAR:
						System.out.println(comando.getTexto() + cliente.getLocalAddress().getHostAddress());
						comando.setNome("Cliente " + cont);
						comando.setTexto("Conectado como '" + comando.getNome() + "' ");
						cont++;
						enviar(comando, output);
						break;
					case DESCONECTAR:
						System.out.println(comando.getTexto());
						comando.setTexto("Adeus " + comando.getNome() + " !");
						enviar(comando, output);
						return;
					case ENVIAR:
						enviar(comando, output);
						break;
					case HELP:
						StringBuffer sb = new StringBuffer();
                                                sb.append("Olá, estes são os comandos que eu estou programado para aceitar:\n\n");
                                                Acao[] values = ChatBot.Acao.values();
                                                for (Acao acao2 : values) {
                                                    sb.append(acao2.toString() + "\n");
                                                }
                                                comando.setNome("Servidor: ");
                                                comando.setTexto(sb.toString());
                                                comando.setAcao(Acao.ENVIAR);
                                                enviar(comando, output);
                                                break;
					default:
						break;
					}

				}
			} catch (IOException | ClassNotFoundException ex) {
				Logger.getLogger(ThreadServer.class.getName()).log(Level.SEVERE, null, ex);
			}

		}

	}

	private void enviar(ChatBot comando, ObjectOutputStream output) throws IOException {
		output.writeObject(comando);
	}

}
